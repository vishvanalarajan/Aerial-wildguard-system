import streamlit as st
import cv2
from ultralytics import YOLO
import pandas as pd
import datetime
import os
import requests
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as PDFImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import threading
import time
from queue import Queue

# --------------------------------------------------
# CONFIGURATION
# --------------------------------------------------
BOT_TOKEN = '8168004449:AAHsY9KsZN2ZGU3EeEVlV5sAXwdGXpal_ss'
CHAT_ID = '7332916002'
MODEL_PATH = 'yolov8n.pt'
CAM_INDEX = 0
LOCATION = "11.3400, 77.6300"
CONF_THRESHOLD = 0.3
PROCESS_EVERY = 5

ANIMAL_CLASSES = ["bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe"]

# --------------------------------------------------
# LOAD YOLO MODEL
# --------------------------------------------------
st.set_page_config(page_title="Aerial WildGuard", layout="wide", page_icon="ü¶ú")
model = YOLO(MODEL_PATH)

if "detection_log" not in st.session_state:
    st.session_state.detection_log = []
if "running" not in st.session_state:
    st.session_state.running = False

# --------------------------------------------------
# TELEGRAM ALERT HANDLER
# --------------------------------------------------
alert_queue = Queue()

def process_alerts():
    while True:
        animal_name, image_path, conf = alert_queue.get()
        try:
            message = (
                f"üö® Wildlife Detected: {animal_name}\n"
                f"üìç Location: {LOCATION}\n"
                f"üéØ Confidence: {conf:.2f}"
            )
            requests.get(
                f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
                params={'chat_id': CHAT_ID, 'text': message}
            )
            with open(image_path, 'rb') as img:
                requests.post(
                    f'https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto',
                    data={'chat_id': CHAT_ID},
                    files={'photo': img}
                )
        except Exception as e:
            st.warning(f"‚ö† Telegram alert failed: {e}")
        alert_queue.task_done()

threading.Thread(target=process_alerts, daemon=True).start()

# --------------------------------------------------
# PDF REPORT GENERATOR
# --------------------------------------------------
def generate_pdf(detections):
    pdf_filename = f"detection_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
    doc = SimpleDocTemplate(pdf_filename, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("<b><font size=16 color='green'>Aerial WildGuard Detection Report</font></b>", styles["Title"]))
    story.append(Spacer(1, 12))

    table_data = [["Animal", "Confidence", "Time", "Location"]]
    for det in detections:
        table_data.append([det["Animal"], str(det["Confidence"]), det["Time"], det["Location"]])

    table = Table(table_data, colWidths=[100, 100, 150, 100])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgreen),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.black),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold")
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    if os.path.exists("latest.jpg"):
        story.append(Paragraph("<b>üì∏ Last Detection Image:</b>", styles["Normal"]))
        story.append(Spacer(1, 8))
        story.append(PDFImage("latest.jpg", width=400, height=300))
        story.append(Spacer(1, 12))

    story.append(Paragraph("<i>Generated by Aerial WildGuard | Powered by YOLOv8 & Streamlit</i>", styles["Italic"]))
    doc.build(story)
    return pdf_filename

# --------------------------------------------------
# STYLING
# --------------------------------------------------
st.markdown("""
    <style>
        .reportview-container {
            background: #f7f9fa;
        }
        .stButton>button {
            background-color: #2e8b57;
            color: white;
            border-radius: 12px;
            font-size: 16px;
            padding: 10px 20px;
        }
        .stButton>button:hover {
            background-color: #1f6f46;
        }
        .big-font {
            font-size:22px !important;
            font-weight:600;
        }
        .small-font {
            font-size:14px !important;
            color: #555;
        }
    </style>
""", unsafe_allow_html=True)

# --------------------------------------------------
# DASHBOARD UI
# --------------------------------------------------
st.title("ü¶ú Aerial WildGuard")
st.markdown("### Real-Time Wildlife Detection, Tracking & Alert System")

with st.sidebar:
    st.header("‚öô Control Panel")
    CONF_THRESHOLD = st.slider("Detection Confidence", 0.0, 1.0, 0.3)
    ENABLE_ALERTS = st.checkbox("Enable Telegram Alerts", value=True)
    start_btn = st.button("‚ñ∂ Start Detection", use_container_width=True)
    stop_btn = st.button("‚èπ Stop Detection", use_container_width=True)
    report_btn = st.button("üìÑ Generate PDF Report", use_container_width=True)
    st.markdown("---")
    st.caption("Developed by Vishva ‚Ä¢ Aerial WildGuard")

frame_placeholder = st.empty()
status_placeholder = st.empty()
log_placeholder = st.expander("üìã Detection Log", expanded=True)

# --------------------------------------------------
# DETECTION LOOP
# --------------------------------------------------
if start_btn:
    st.session_state.running = True
    cap = cv2.VideoCapture(CAM_INDEX)
    st.success("‚úÖ Detection started. Scanning for wildlife...")
    frame_count = 0

    while st.session_state.running:
        ret, frame = cap.read()
        if not ret:
            st.error("‚ùå Camera not accessible!")
            break

        frame_count += 1
        if frame_count % PROCESS_EVERY == 0:
            results = model(frame)
            for result in results:
                for box in result.boxes:
                    conf = float(box.conf.item())
                    cls_id = int(box.cls.item())
                    animal_name = model.names[cls_id]

                    if animal_name in ANIMAL_CLASSES and conf >= CONF_THRESHOLD:
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, f"{animal_name} ({conf:.2f})", (x1, y1 - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

                        threading.Thread(target=cv2.imwrite, args=("latest.jpg", frame)).start()

                        log_entry = {
                            "Animal": animal_name,
                            "Confidence": round(conf, 2),
                            "Time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "Location": LOCATION
                        }
                        st.session_state.detection_log.append(log_entry)

                        if ENABLE_ALERTS:
                            alert_queue.put((animal_name, "latest.jpg", conf))

        frame_placeholder.image(frame, channels="BGR", use_container_width=True)
        status_placeholder.markdown(f"<p class='small-font'>üì° Frames processed: {frame_count}</p>", unsafe_allow_html=True)

        if stop_btn:
            st.session_state.running = False
            st.warning("üõë Detection stopped.")
            break

        time.sleep(0.05)

    cap.release()

# --------------------------------------------------
# POST-DETECTION VIEW
# --------------------------------------------------
if st.session_state.detection_log:
    df = pd.DataFrame(st.session_state.detection_log)
    log_placeholder.dataframe(df)

    st.markdown("### üåç Detection Map")
    map_data = pd.DataFrame({
        "lat": [float(x.split(',')[0]) for x in df["Location"]],
        "lon": [float(x.split(',')[1]) for x in df["Location"]]
    })
    st.map(map_data, use_container_width=True)

if report_btn:
    if st.session_state.detection_log:
        pdf_file = generate_pdf(st.session_state.detection_log)
        with open(pdf_file, "rb") as f:
            st.download_button(
                label="üì• Download Detection Report",
                data=f,
                file_name=pdf_file,
                mime="application/pdf"
            )
        st.success("‚úÖ PDF report generated successfully!")
    else:
        st.warning("‚ö† No detections yet to generate a report.")